// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Recruitment.Api.EntityFramework.MSSQL.Data;

#nullable disable

namespace Recruitment.Api.EntityFramework.MSSQL.Migrations
{
    [DbContext(typeof(ApiContext))]
    partial class ApiContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AgentJobPost", b =>
                {
                    b.Property<Guid>("AgentOfId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AgentsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AgentOfId", "AgentsId");

                    b.HasIndex("AgentsId");

                    b.ToTable("AgentJobPost");
                });

            modelBuilder.Entity("JobPostTag", b =>
                {
                    b.Property<Guid>("JobPostsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TagsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("JobPostsId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("JobPostTag");
                });

            modelBuilder.Entity("Recruitment.Api.Core.Entities.Agent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Agents");
                });

            modelBuilder.Entity("Recruitment.Api.Core.Entities.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("Recruitment.Api.Core.Entities.JobPost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CompanyId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DeadLine")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Files")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("JobDescriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountManagerId");

                    b.HasIndex("CompanyId")
                        .IsUnique();

                    b.HasIndex("CompanyId1");

                    b.ToTable("JobPosts");
                });

            modelBuilder.Entity("Recruitment.Api.Core.Entities.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Recruitment.Api.Core.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Recruitment.Api.Core.Entities.UserApplication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrentStatus")
                        .HasColumnType("int");

                    b.Property<Guid?>("JobPostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ResumeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("JobPostId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserApplications");
                });

            modelBuilder.Entity("AgentJobPost", b =>
                {
                    b.HasOne("Recruitment.Api.Core.Entities.JobPost", null)
                        .WithMany()
                        .HasForeignKey("AgentOfId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Recruitment.Api.Core.Entities.Agent", null)
                        .WithMany()
                        .HasForeignKey("AgentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JobPostTag", b =>
                {
                    b.HasOne("Recruitment.Api.Core.Entities.JobPost", null)
                        .WithMany()
                        .HasForeignKey("JobPostsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Recruitment.Api.Core.Entities.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Recruitment.Api.Core.Entities.Agent", b =>
                {
                    b.HasOne("Recruitment.Api.Core.Entities.User", "User")
                        .WithOne()
                        .HasForeignKey("Recruitment.Api.Core.Entities.Agent", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Recruitment.Api.Core.Entities.JobPost", b =>
                {
                    b.HasOne("Recruitment.Api.Core.Entities.Agent", "AccountManager")
                        .WithMany("AccountManagerOf")
                        .HasForeignKey("AccountManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Recruitment.Api.Core.Entities.Company", "Company")
                        .WithOne()
                        .HasForeignKey("Recruitment.Api.Core.Entities.JobPost", "CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Recruitment.Api.Core.Entities.Company", null)
                        .WithMany("Posts")
                        .HasForeignKey("CompanyId1");

                    b.Navigation("AccountManager");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Recruitment.Api.Core.Entities.Tag", b =>
                {
                    b.HasOne("Recruitment.Api.Core.Entities.User", null)
                        .WithMany("PreferedTags")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Recruitment.Api.Core.Entities.UserApplication", b =>
                {
                    b.HasOne("Recruitment.Api.Core.Entities.JobPost", null)
                        .WithMany("Applicants")
                        .HasForeignKey("JobPostId");

                    b.HasOne("Recruitment.Api.Core.Entities.User", "User")
                        .WithOne()
                        .HasForeignKey("Recruitment.Api.Core.Entities.UserApplication", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Recruitment.Api.Core.Entities.Agent", b =>
                {
                    b.Navigation("AccountManagerOf");
                });

            modelBuilder.Entity("Recruitment.Api.Core.Entities.Company", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("Recruitment.Api.Core.Entities.JobPost", b =>
                {
                    b.Navigation("Applicants");
                });

            modelBuilder.Entity("Recruitment.Api.Core.Entities.User", b =>
                {
                    b.Navigation("PreferedTags");
                });
#pragma warning restore 612, 618
        }
    }
}
